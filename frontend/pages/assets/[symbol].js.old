import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';

export default function AssetPage() {
    const router = useRouter();
    const { symbol } = router.query;
    
    const [account, setAccount] = useState('');
    const [asset, setAsset] = useState(null);
    const [balances, setBalances] = useState({});
    const [orders, setOrders] = useState({ buyOrders: [], sellOrders: [] });
    const [priceHistory, setPriceHistory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    
    // √âtats pour les formulaires
    const [orderType, setOrderType] = useState('buy');
    const [quantity, setQuantity] = useState('');
    const [price, setPrice] = useState('');
    const [creating, setCreating] = useState(false);
    const [needsApproval, setNeedsApproval] = useState(false);
    const [approving, setApproving] = useState(false);

    // Adresses des contrats (depuis deployed-addresses.json)
    const CONTRACT_ADDRESSES = {
        TRG: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        CLV: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512", 
        ROO: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        VAULT: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
    };

    useEffect(() => {
        if (symbol) {
            checkWallet();
        }
    }, [symbol]);

    const checkWallet = async () => {
        if (typeof window.ethereum !== 'undefined') {
            try {
                const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                if (accounts.length > 0) {
                    setAccount(accounts[0]);
                    await loadAssetData();
                    await loadBalances(accounts[0]);
                    await loadOrderBook();
                } else {
                    router.push('/');
                }
            } catch (error) {
                console.error('Erreur wallet:', error);
                setError('Erreur de connexion wallet');
                setLoading(false);
            }
        } else {
            router.push('/');
        }
    };

    const loadAssetData = async () => {
        try {
            const response = await fetch(`http://localhost:3001/api/assets/${symbol}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    setAsset(data.asset);
                    setPrice(data.asset.currentPrice.toString());
                }
            }
        } catch (error) {
            console.error('Erreur asset:', error);
        }
    };

    const loadBalances = async (userAddress) => {
        try {
            const response = await fetch(`http://localhost:3001/api/balances/${userAddress}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    setBalances(data.balances || {});
                }
            }
        } catch (error) {
            console.error('Erreur balances:', error);
        }
    };

    const loadOrderBook = async () => {
        try {
            const response = await fetch(`http://localhost:3001/api/orderbook/${symbol}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    setOrders({
                        buyOrders: data.orderbook.buy || [],
                        sellOrders: data.orderbook.sell || []
                    });
                }
            }
        } catch (error) {
            console.error('Erreur orderbook:', error);
            setOrders({ buyOrders: [], sellOrders: [] });
        } finally {
            setLoading(false);
        }
    };

    const checkApproval = async () => {
        const tokenNeeded = orderType === 'sell' ? symbol : 'TRG';
        const amountNeeded = orderType === 'sell' ? quantity : (parseFloat(quantity) * parseFloat(price));
        
        try {
            const response = await fetch(`http://localhost:3001/api/check-allowance/${account}/${tokenNeeded}/${amountNeeded}`);
            const data = await response.json();
            
            return data.hasAllowance;
        } catch (error) {
            console.error('Erreur v√©rification approbation:', error);
            return false;
        }
    };

    // üîß FONCTION D'APPROBATION CORRIG√âE
    const requestApproval = async () => {
        if (!window.ethereum) return;
        
        setApproving(true);
        
        try {
            const tokenNeeded = orderType === 'sell' ? symbol : 'TRG';
            const amountNeeded = orderType === 'sell' ? quantity : (parseFloat(quantity) * parseFloat(price));
            
            console.log('üîì Demande d\'approbation:', { tokenNeeded, amountNeeded });
            
            // Convertir le montant en Wei (format BigNumber)
            const amountWei = (parseFloat(amountNeeded) * Math.pow(10, 18)).toString();
            const amountHex = '0x' + BigInt(amountWei).toString(16);
            
            // Adresse du token √† approuver
            const tokenAddress = CONTRACT_ADDRESSES[tokenNeeded];
            const spenderAddress = CONTRACT_ADDRESSES.VAULT;
            
            // Construire les donn√©es de la transaction ERC20.approve(spender, amount)
            const functionSignature = '0x095ea7b3'; // approve(address,uint256)
            const spenderPadded = spenderAddress.slice(2).padStart(64, '0');
            const amountPadded = amountHex.slice(2).padStart(64, '0');
            
            const txData = functionSignature + spenderPadded + amountPadded;
            
            console.log('üìã Transaction d\'approbation:', {
                to: tokenAddress,
                data: txData,
                amountWei: amountWei,
                amountHex: amountHex
            });

            const txParams = {
                to: tokenAddress,
                from: account,
                data: txData,
                gas: '0x15f90', // 90000 gas
            };

            const txHash = await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [txParams],
            });

            console.log('‚úÖ Approbation envoy√©e:', txHash);
            alert('Approbation envoy√©e ! Attendez la confirmation...');
            
            // Attendre la confirmation (polling)
            let attempts = 0;
            const maxAttempts = 10;
            
            const checkConfirmation = async () => {
                attempts++;
                console.log(`üîç V√©rification approbation... (${attempts}/${maxAttempts})`);
                
                const hasApproval = await checkApproval();
                if (hasApproval) {
                    setNeedsApproval(false);
                    setApproving(false);
                    alert('‚úÖ Approbation confirm√©e ! Vous pouvez maintenant cr√©er l\'ordre.');
                    return;
                }
                
                if (attempts < maxAttempts) {
                    setTimeout(checkConfirmation, 2000);
                } else {
                    setApproving(false);
                    alert('‚è±Ô∏è D√©lai d\'attente d√©pass√©. V√©rifiez votre transaction et r√©essayez.');
                }
            };
            
            setTimeout(checkConfirmation, 3000);

        } catch (error) {
            console.error('Erreur approbation:', error);
            alert('Erreur lors de l\'approbation: ' + error.message);
            setApproving(false);
        }
    };

    const createOrder = async (e) => {
        e.preventDefault();
        
        if (!quantity || !price) {
            alert('Veuillez remplir tous les champs');
            return;
        }

        if (parseFloat(quantity) <= 0 || parseFloat(price) <= 0) {
            alert('La quantit√© et le prix doivent √™tre positifs');
            return;
        }

        setCreating(true);

        try {
            // V√©rifier l'approbation d'abord
            const hasApproval = await checkApproval();
            
            if (!hasApproval) {
                setNeedsApproval(true);
                setCreating(false);
                alert('‚ö†Ô∏è Approbation requise avant de cr√©er l\'ordre');
                return;
            }

            const response = await fetch('http://localhost:3001/api/create-order-with-approval', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userAddress: account,
                    assetSymbol: symbol,
                    orderType: orderType,
                    quantity: parseFloat(quantity),
                    price: parseFloat(price)
                })
            });

            const data = await response.json();

            if (data.success) {
                alert(`‚úÖ Ordre ${orderType} cr√©√© avec succ√®s!`);
                setQuantity('');
                setNeedsApproval(false);
                
                // Recharger les donn√©es
                await loadBalances(account);
                await loadOrderBook();
            } else if (data.needsApproval) {
                setNeedsApproval(true);
                alert('‚ö†Ô∏è Approbation requise');
            } else {
                alert(`‚ùå Erreur: ${data.error}`);
            }
        } catch (error) {
            console.error('Erreur cr√©ation ordre:', error);
            alert('Erreur lors de la cr√©ation de l\'ordre');
        } finally {
            setCreating(false);
        }
    };

    if (loading) {
        return (
            <div style={{ padding: '20px', textAlign: 'center' }}>
                <h1>üìà Chargement...</h1>
            </div>
        );
    }

    if (error) {
        return (
            <div style={{ padding: '20px', textAlign: 'center' }}>
                <h1>‚ùå Erreur</h1>
                <p>{error}</p>
                <button onClick={() => router.push('/')}>Retour</button>
            </div>
        );
    }

    return (
        <div style={{ 
            padding: '20px', 
            maxWidth: '1200px', 
            margin: '0 auto',
            fontFamily: 'Arial, sans-serif'
        }}>
            {/* Header */}
            <div style={{ marginBottom: '20px' }}>
                <button 
                    onClick={() => router.push('/portfolio')}
                    style={{
                        padding: '10px 20px',
                        backgroundColor: '#6366f1',
                        color: 'white',
                        border: 'none',
                        borderRadius: '5px',
                        cursor: 'pointer',
                        marginRight: '10px'
                    }}
                >
                    ‚Üê Portfolio
                </button>
                <button 
                    onClick={() => router.push('/')}
                    style={{
                        padding: '10px 20px',
                        backgroundColor: '#6b7280',
                        color: 'white',
                        border: 'none',
                        borderRadius: '5px',
                        cursor: 'pointer'
                    }}
                >
                    üè† Accueil
                </button>
            </div>

            {/* Titre */}
            <div style={{ textAlign: 'center', marginBottom: '30px' }}>
                <h1>üìà Trading {symbol} - SYST√àME CORRIG√â</h1>
                {asset && (
                    <p style={{ fontSize: '18px', color: '#6b7280' }}>
                        {asset.name} ‚Ä¢ Prix par d√©faut: {asset.currentPrice} TRG
                    </p>
                )}
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '30px' }}>
                {/* Graphique des prix (gauche) */}
                <div>
                    <h2>üìä Carnet d'ordres</h2>
                    <div style={{ 
                        display: 'grid', 
                        gridTemplateColumns: '1fr 1fr', 
                        gap: '15px'
                    }}>
                        {/* Ordres d'achat */}
                        <div>
                            <strong>üí∞ Ordres d'achat</strong>
                            {orders.buyOrders && orders.buyOrders.length > 0 ? (
                                orders.buyOrders.map((order, index) => (
                                    <div key={index} style={{ 
                                        padding: '5px', 
                                        backgroundColor: '#d4edda',
                                        borderRadius: '3px',
                                        margin: '5px 0',
                                        fontSize: '14px'
                                    }}>
                                        {order.quantity} @ {order.price} TRG
                                    </div>
                                ))
                            ) : (
                                <div style={{ 
                                    padding: '10px', 
                                    backgroundColor: '#f8f9fa',
                                    borderRadius: '3px',
                                    margin: '5px 0',
                                    fontSize: '14px',
                                    color: '#6c757d'
                                }}>
                                    Aucun ordre d'achat
                                </div>
                            )}
                        </div>

                        {/* Ordres de vente */}
                        <div>
                            <strong>üí∏ Ordres de vente</strong>
                            {orders.sellOrders && orders.sellOrders.length > 0 ? (
                                orders.sellOrders.map((order, index) => (
                                    <div key={index} style={{ 
                                        padding: '5px', 
                                        backgroundColor: '#f8d7da',
                                        borderRadius: '3px',
                                        margin: '5px 0',
                                        fontSize: '14px'
                                    }}>
                                        {order.quantity} @ {order.price} TRG
                                    </div>
                                ))
                            ) : (
                                <div style={{ 
                                    padding: '10px', 
                                    backgroundColor: '#f8f9fa',
                                    borderRadius: '3px',
                                    margin: '5px 0',
                                    fontSize: '14px',
                                    color: '#6c757d'
                                }}>
                                    Aucun ordre de vente
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {/* Panneau de trading (droite) */}
                <div>
                    <h2>üíº Trading avec Approbations CORRIG√â</h2>
                    
                    {/* Mes balances */}
                    <div style={{ 
                        backgroundColor: '#e7f3ff', 
                        padding: '15px', 
                        borderRadius: '10px',
                        marginBottom: '20px'
                    }}>
                        <h3>üí∞ Mes balances</h3>
                        <p><strong>TRG:</strong> {balances.TRG || 0}</p>
                        <p><strong>{symbol}:</strong> {balances[symbol] || 0}</p>
                    </div>

                    {/* Formulaire de cr√©ation d'ordre */}
                    <div style={{ 
                        backgroundColor: '#f8f9fa', 
                        padding: '20px', 
                        borderRadius: '10px'
                    }}>
                        <h3>üìù Cr√©er un ordre (syst√®me corrig√©)</h3>
                        
                        {needsApproval && (
                            <div style={{
                                backgroundColor: '#fff3cd',
                                border: '1px solid #ffeaa7',
                                padding: '15px',
                                borderRadius: '5px',
                                marginBottom: '15px'
                            }}>
                                <strong>‚ö†Ô∏è Approbation requise</strong>
                                <p>Token √† approuver: <strong>{orderType === 'sell' ? symbol : 'TRG'}</strong></p>
                                <p>Montant: <strong>{orderType === 'sell' ? quantity : (parseFloat(quantity || 0) * parseFloat(price || 0)).toFixed(2)}</strong></p>
                                <button 
                                    onClick={requestApproval}
                                    disabled={approving}
                                    style={{
                                        padding: '10px 20px',
                                        backgroundColor: '#ffc107',
                                        color: 'black',
                                        border: 'none',
                                        borderRadius: '5px',
                                        cursor: approving ? 'not-allowed' : 'pointer'
                                    }}
                                >
                                    {approving ? '‚è≥ Approbation en cours...' : 'üîì Approuver maintenant'}
                                </button>
                            </div>
                        )}
                        
                        <form id="order-form" onSubmit={createOrder}>
                            {/* Type d'ordre */}
                            <div style={{ marginBottom: '15px' }}>
                                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                                    Type d'ordre:
                                </label>
                                <select 
                                    value={orderType} 
                                    onChange={(e) => {
                                        setOrderType(e.target.value);
                                        setNeedsApproval(false); // Reset approval status
                                    }}
                                    style={{ 
                                        width: '100%', 
                                        padding: '10px', 
                                        borderRadius: '5px',
                                        border: '1px solid #ddd'
                                    }}
                                >
                                    <option value="buy">üí∞ Achat</option>
                                    <option value="sell">üí∏ Vente</option>
                                </select>
                            </div>

                            {/* Quantit√© */}
                            <div style={{ marginBottom: '15px' }}>
                                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                                    Quantit√©:
                                </label>
                                <input 
                                    type="number" 
                                    value={quantity}
                                    onChange={(e) => {
                                        setQuantity(e.target.value);
                                        setNeedsApproval(false); // Reset approval status
                                    }}
                                    min="0.1"
                                    step="0.1"
                                    placeholder="Ex: 5"
                                    style={{ 
                                        width: '100%', 
                                        padding: '10px', 
                                        borderRadius: '5px',
                                        border: '1px solid #ddd'
                                    }}
                                />
                            </div>

                            {/* Prix */}
                            <div style={{ marginBottom: '20px' }}>
                                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                                    Prix (TRG):
                                </label>
                                <input 
                                    type="number" 
                                    value={price}
                                    onChange={(e) => {
                                        setPrice(e.target.value);
                                        setNeedsApproval(false); // Reset approval status
                                    }}
                                    min="0.1"
                                    step="0.1"
                                    placeholder="Ex: 10"
                                    style={{ 
                                        width: '100%', 
                                        padding: '10px', 
                                        borderRadius: '5px',
                                        border: '1px solid #ddd'
                                    }}
                                />
                            </div>

                            {/* Bouton de v√©rification d'approbation */}
                            {quantity && price && !needsApproval && (
                                <button 
                                    type="button"
                                    onClick={async () => {
                                        const hasApproval = await checkApproval();
                                        if (!hasApproval) {
                                            setNeedsApproval(true);
                                        } else {
                                            alert('‚úÖ Approbation d√©j√† accord√©e !');
                                        }
                                    }}
                                    style={{
                                        width: '100%',
                                        padding: '10px',
                                        backgroundColor: '#17a2b8',
                                        color: 'white',
                                        border: 'none',
                                        borderRadius: '5px',
                                        cursor: 'pointer',
                                        marginBottom: '10px'
                                    }}
                                >
                                    üîç V√©rifier Approbation
                                </button>
                            )}

                            {/* Bouton de soumission */}
                            <button 
                                type="submit"
                                disabled={creating || needsApproval}
                                style={{
                                    width: '100%',
                                    padding: '15px',
                                    backgroundColor: creating || needsApproval ? '#6c757d' : '#007bff',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '5px',
                                    cursor: creating || needsApproval ? 'not-allowed' : 'pointer',
                                    fontSize: '16px',
                                    fontWeight: 'bold'
                                }}
                            >
                                {creating ? '‚è≥ Cr√©ation...' : 
                                 needsApproval ? 'üîí Approbation requise' :
                                 `${orderType === 'buy' ? 'üí∞ Acheter' : 'üí∏ Vendre'} ${symbol}`}
                            </button>
                        </form>

                        {/* R√©sum√© de l'ordre */}
                        {quantity && price && (
                            <div style={{ 
                                marginTop: '15px', 
                                padding: '10px', 
                                backgroundColor: needsApproval ? '#fff3cd' : '#e7f3ff',
                                borderRadius: '5px'
                            }}>
                                <strong>üìã R√©sum√©:</strong>
                                <br />
                                {orderType === 'buy' ? 'Acheter' : 'Vendre'} {quantity} {symbol} 
                                √† {price} TRG chacun
                                <br />
                                <strong>Total: {(parseFloat(quantity || 0) * parseFloat(price || 0)).toFixed(2)} TRG</strong>
                                <br />
                                <small style={{ color: '#6c757d' }}>
                                    ‚öôÔ∏è Token √† approuver: <strong>{orderType === 'sell' ? symbol : 'TRG'}</strong>
                                    <br />
                                    üìä Quantit√© requise: <strong>{orderType === 'sell' ? quantity : (parseFloat(quantity || 0) * parseFloat(price || 0)).toFixed(2)}</strong>
                                    <br />
                                    üè¶ Vault: {CONTRACT_ADDRESSES.VAULT}
                                </small>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}
